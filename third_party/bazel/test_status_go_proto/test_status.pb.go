// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/main/protobuf/test_status.proto

package blaze

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FailedTestCasesStatus int32

const (
	FailedTestCasesStatus_FULL          FailedTestCasesStatus = 1
	FailedTestCasesStatus_PARTIAL       FailedTestCasesStatus = 2
	FailedTestCasesStatus_NOT_AVAILABLE FailedTestCasesStatus = 3
	FailedTestCasesStatus_EMPTY         FailedTestCasesStatus = 4
)

var FailedTestCasesStatus_name = map[int32]string{
	1: "FULL",
	2: "PARTIAL",
	3: "NOT_AVAILABLE",
	4: "EMPTY",
}

var FailedTestCasesStatus_value = map[string]int32{
	"FULL":          1,
	"PARTIAL":       2,
	"NOT_AVAILABLE": 3,
	"EMPTY":         4,
}

func (x FailedTestCasesStatus) Enum() *FailedTestCasesStatus {
	p := new(FailedTestCasesStatus)
	*p = x
	return p
}

func (x FailedTestCasesStatus) String() string {
	return proto.EnumName(FailedTestCasesStatus_name, int32(x))
}

func (x *FailedTestCasesStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FailedTestCasesStatus_value, data, "FailedTestCasesStatus")
	if err != nil {
		return err
	}
	*x = FailedTestCasesStatus(value)
	return nil
}

func (FailedTestCasesStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e05c8aa4a0f85ce8, []int{0}
}

type BlazeTestStatus int32

const (
	BlazeTestStatus_NO_STATUS                   BlazeTestStatus = 0
	BlazeTestStatus_PASSED                      BlazeTestStatus = 1
	BlazeTestStatus_FLAKY                       BlazeTestStatus = 2
	BlazeTestStatus_TIMEOUT                     BlazeTestStatus = 3
	BlazeTestStatus_FAILED                      BlazeTestStatus = 4
	BlazeTestStatus_INCOMPLETE                  BlazeTestStatus = 5
	BlazeTestStatus_REMOTE_FAILURE              BlazeTestStatus = 6
	BlazeTestStatus_FAILED_TO_BUILD             BlazeTestStatus = 7
	BlazeTestStatus_BLAZE_HALTED_BEFORE_TESTING BlazeTestStatus = 8
)

var BlazeTestStatus_name = map[int32]string{
	0: "NO_STATUS",
	1: "PASSED",
	2: "FLAKY",
	3: "TIMEOUT",
	4: "FAILED",
	5: "INCOMPLETE",
	6: "REMOTE_FAILURE",
	7: "FAILED_TO_BUILD",
	8: "BLAZE_HALTED_BEFORE_TESTING",
}

var BlazeTestStatus_value = map[string]int32{
	"NO_STATUS":                   0,
	"PASSED":                      1,
	"FLAKY":                       2,
	"TIMEOUT":                     3,
	"FAILED":                      4,
	"INCOMPLETE":                  5,
	"REMOTE_FAILURE":              6,
	"FAILED_TO_BUILD":             7,
	"BLAZE_HALTED_BEFORE_TESTING": 8,
}

func (x BlazeTestStatus) Enum() *BlazeTestStatus {
	p := new(BlazeTestStatus)
	*p = x
	return p
}

func (x BlazeTestStatus) String() string {
	return proto.EnumName(BlazeTestStatus_name, int32(x))
}

func (x *BlazeTestStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BlazeTestStatus_value, data, "BlazeTestStatus")
	if err != nil {
		return err
	}
	*x = BlazeTestStatus(value)
	return nil
}

func (BlazeTestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e05c8aa4a0f85ce8, []int{1}
}

type TestCase_Type int32

const (
	TestCase_TEST_CASE      TestCase_Type = 0
	TestCase_TEST_SUITE     TestCase_Type = 1
	TestCase_TEST_DECORATOR TestCase_Type = 2
	TestCase_UNKNOWN        TestCase_Type = 3
)

var TestCase_Type_name = map[int32]string{
	0: "TEST_CASE",
	1: "TEST_SUITE",
	2: "TEST_DECORATOR",
	3: "UNKNOWN",
}

var TestCase_Type_value = map[string]int32{
	"TEST_CASE":      0,
	"TEST_SUITE":     1,
	"TEST_DECORATOR": 2,
	"UNKNOWN":        3,
}

func (x TestCase_Type) Enum() *TestCase_Type {
	p := new(TestCase_Type)
	*p = x
	return p
}

func (x TestCase_Type) String() string {
	return proto.EnumName(TestCase_Type_name, int32(x))
}

func (x *TestCase_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestCase_Type_value, data, "TestCase_Type")
	if err != nil {
		return err
	}
	*x = TestCase_Type(value)
	return nil
}

func (TestCase_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e05c8aa4a0f85ce8, []int{0, 0}
}

type TestCase_Status int32

const (
	TestCase_PASSED TestCase_Status = 0
	TestCase_FAILED TestCase_Status = 1
	TestCase_ERROR  TestCase_Status = 2
)

var TestCase_Status_name = map[int32]string{
	0: "PASSED",
	1: "FAILED",
	2: "ERROR",
}

var TestCase_Status_value = map[string]int32{
	"PASSED": 0,
	"FAILED": 1,
	"ERROR":  2,
}

func (x TestCase_Status) Enum() *TestCase_Status {
	p := new(TestCase_Status)
	*p = x
	return p
}

func (x TestCase_Status) String() string {
	return proto.EnumName(TestCase_Status_name, int32(x))
}

func (x *TestCase_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestCase_Status_value, data, "TestCase_Status")
	if err != nil {
		return err
	}
	*x = TestCase_Status(value)
	return nil
}

func (TestCase_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e05c8aa4a0f85ce8, []int{0, 1}
}

type TestCase struct {
	Child                []*TestCase      `protobuf:"bytes,1,rep,name=child" json:"child,omitempty"`
	Name                 *string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ClassName            *string          `protobuf:"bytes,3,opt,name=class_name,json=className" json:"class_name,omitempty"`
	RunDurationMillis    *int64           `protobuf:"varint,4,opt,name=run_duration_millis,json=runDurationMillis" json:"run_duration_millis,omitempty"`
	Result               *string          `protobuf:"bytes,5,opt,name=result" json:"result,omitempty"`
	Type                 *TestCase_Type   `protobuf:"varint,6,opt,name=type,enum=blaze.TestCase_Type" json:"type,omitempty"`
	Status               *TestCase_Status `protobuf:"varint,7,opt,name=status,enum=blaze.TestCase_Status" json:"status,omitempty"`
	Run                  *bool            `protobuf:"varint,8,opt,name=run,def=1" json:"run,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TestCase) Reset()         { *m = TestCase{} }
func (m *TestCase) String() string { return proto.CompactTextString(m) }
func (*TestCase) ProtoMessage()    {}
func (*TestCase) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05c8aa4a0f85ce8, []int{0}
}

func (m *TestCase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestCase.Unmarshal(m, b)
}
func (m *TestCase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestCase.Marshal(b, m, deterministic)
}
func (m *TestCase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCase.Merge(m, src)
}
func (m *TestCase) XXX_Size() int {
	return xxx_messageInfo_TestCase.Size(m)
}
func (m *TestCase) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCase.DiscardUnknown(m)
}

var xxx_messageInfo_TestCase proto.InternalMessageInfo

const Default_TestCase_Run bool = true

func (m *TestCase) GetChild() []*TestCase {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *TestCase) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TestCase) GetClassName() string {
	if m != nil && m.ClassName != nil {
		return *m.ClassName
	}
	return ""
}

func (m *TestCase) GetRunDurationMillis() int64 {
	if m != nil && m.RunDurationMillis != nil {
		return *m.RunDurationMillis
	}
	return 0
}

func (m *TestCase) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

func (m *TestCase) GetType() TestCase_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return TestCase_TEST_CASE
}

func (m *TestCase) GetStatus() TestCase_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return TestCase_PASSED
}

func (m *TestCase) GetRun() bool {
	if m != nil && m.Run != nil {
		return *m.Run
	}
	return Default_TestCase_Run
}

type TestResultData struct {
	Cachable             *bool                  `protobuf:"varint,1,opt,name=cachable" json:"cachable,omitempty"`
	TestPassed           *bool                  `protobuf:"varint,2,opt,name=test_passed,json=testPassed" json:"test_passed,omitempty"`
	Status               *BlazeTestStatus       `protobuf:"varint,3,opt,name=status,enum=blaze.BlazeTestStatus,def=0" json:"status,omitempty"`
	FailedLogs           []string               `protobuf:"bytes,4,rep,name=failed_logs,json=failedLogs" json:"failed_logs,omitempty"`
	Warning              []string               `protobuf:"bytes,5,rep,name=warning" json:"warning,omitempty"`
	HasCoverage          *bool                  `protobuf:"varint,6,opt,name=has_coverage,json=hasCoverage" json:"has_coverage,omitempty"`
	RemotelyCached       *bool                  `protobuf:"varint,7,opt,name=remotely_cached,json=remotelyCached" json:"remotely_cached,omitempty"`
	IsRemoteStrategy     *bool                  `protobuf:"varint,8,opt,name=is_remote_strategy,json=isRemoteStrategy" json:"is_remote_strategy,omitempty"`
	TestTimes            []int64                `protobuf:"varint,9,rep,name=test_times,json=testTimes" json:"test_times,omitempty"`
	PassedLog            *string                `protobuf:"bytes,10,opt,name=passed_log,json=passedLog" json:"passed_log,omitempty"`
	TestProcessTimes     []int64                `protobuf:"varint,11,rep,name=test_process_times,json=testProcessTimes" json:"test_process_times,omitempty"`
	RunDurationMillis    *int64                 `protobuf:"varint,12,opt,name=run_duration_millis,json=runDurationMillis" json:"run_duration_millis,omitempty"`
	StartTimeMillisEpoch *int64                 `protobuf:"varint,15,opt,name=start_time_millis_epoch,json=startTimeMillisEpoch" json:"start_time_millis_epoch,omitempty"`
	TestCase             *TestCase              `protobuf:"bytes,13,opt,name=test_case,json=testCase" json:"test_case,omitempty"`
	FailedStatus         *FailedTestCasesStatus `protobuf:"varint,14,opt,name=failed_status,json=failedStatus,enum=blaze.FailedTestCasesStatus" json:"failed_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TestResultData) Reset()         { *m = TestResultData{} }
func (m *TestResultData) String() string { return proto.CompactTextString(m) }
func (*TestResultData) ProtoMessage()    {}
func (*TestResultData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05c8aa4a0f85ce8, []int{1}
}

func (m *TestResultData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResultData.Unmarshal(m, b)
}
func (m *TestResultData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResultData.Marshal(b, m, deterministic)
}
func (m *TestResultData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResultData.Merge(m, src)
}
func (m *TestResultData) XXX_Size() int {
	return xxx_messageInfo_TestResultData.Size(m)
}
func (m *TestResultData) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResultData.DiscardUnknown(m)
}

var xxx_messageInfo_TestResultData proto.InternalMessageInfo

const Default_TestResultData_Status BlazeTestStatus = BlazeTestStatus_NO_STATUS

func (m *TestResultData) GetCachable() bool {
	if m != nil && m.Cachable != nil {
		return *m.Cachable
	}
	return false
}

func (m *TestResultData) GetTestPassed() bool {
	if m != nil && m.TestPassed != nil {
		return *m.TestPassed
	}
	return false
}

func (m *TestResultData) GetStatus() BlazeTestStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_TestResultData_Status
}

func (m *TestResultData) GetFailedLogs() []string {
	if m != nil {
		return m.FailedLogs
	}
	return nil
}

func (m *TestResultData) GetWarning() []string {
	if m != nil {
		return m.Warning
	}
	return nil
}

func (m *TestResultData) GetHasCoverage() bool {
	if m != nil && m.HasCoverage != nil {
		return *m.HasCoverage
	}
	return false
}

func (m *TestResultData) GetRemotelyCached() bool {
	if m != nil && m.RemotelyCached != nil {
		return *m.RemotelyCached
	}
	return false
}

func (m *TestResultData) GetIsRemoteStrategy() bool {
	if m != nil && m.IsRemoteStrategy != nil {
		return *m.IsRemoteStrategy
	}
	return false
}

func (m *TestResultData) GetTestTimes() []int64 {
	if m != nil {
		return m.TestTimes
	}
	return nil
}

func (m *TestResultData) GetPassedLog() string {
	if m != nil && m.PassedLog != nil {
		return *m.PassedLog
	}
	return ""
}

func (m *TestResultData) GetTestProcessTimes() []int64 {
	if m != nil {
		return m.TestProcessTimes
	}
	return nil
}

func (m *TestResultData) GetRunDurationMillis() int64 {
	if m != nil && m.RunDurationMillis != nil {
		return *m.RunDurationMillis
	}
	return 0
}

func (m *TestResultData) GetStartTimeMillisEpoch() int64 {
	if m != nil && m.StartTimeMillisEpoch != nil {
		return *m.StartTimeMillisEpoch
	}
	return 0
}

func (m *TestResultData) GetTestCase() *TestCase {
	if m != nil {
		return m.TestCase
	}
	return nil
}

func (m *TestResultData) GetFailedStatus() FailedTestCasesStatus {
	if m != nil && m.FailedStatus != nil {
		return *m.FailedStatus
	}
	return FailedTestCasesStatus_FULL
}

func init() {
	proto.RegisterEnum("blaze.FailedTestCasesStatus", FailedTestCasesStatus_name, FailedTestCasesStatus_value)
	proto.RegisterEnum("blaze.BlazeTestStatus", BlazeTestStatus_name, BlazeTestStatus_value)
	proto.RegisterEnum("blaze.TestCase_Type", TestCase_Type_name, TestCase_Type_value)
	proto.RegisterEnum("blaze.TestCase_Status", TestCase_Status_name, TestCase_Status_value)
	proto.RegisterType((*TestCase)(nil), "blaze.TestCase")
	proto.RegisterType((*TestResultData)(nil), "blaze.TestResultData")
}

func init() {
	proto.RegisterFile("src/main/protobuf/test_status.proto", fileDescriptor_e05c8aa4a0f85ce8)
}

var fileDescriptor_e05c8aa4a0f85ce8 = []byte{
	// 820 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xdd, 0x8e, 0xda, 0x46,
	0x14, 0x8e, 0xd7, 0xc0, 0x9a, 0xc3, 0x2e, 0x38, 0x93, 0x74, 0x6b, 0xf5, 0x47, 0x4b, 0xb7, 0xaa,
	0x42, 0xd3, 0xc8, 0x2b, 0x45, 0xea, 0x45, 0x73, 0x67, 0x60, 0x68, 0x51, 0x0c, 0x46, 0xc3, 0xd0,
	0x2a, 0xbd, 0x19, 0x0d, 0x66, 0x02, 0x96, 0x0c, 0x46, 0x9e, 0xf1, 0x46, 0xdb, 0xbb, 0x3e, 0x43,
	0xdf, 0xa2, 0x4f, 0x59, 0xcd, 0x8c, 0x59, 0x35, 0xab, 0xe4, 0xc6, 0xf2, 0xf9, 0xbe, 0x73, 0xce,
	0x9c, 0xbf, 0x0f, 0xbe, 0x97, 0x65, 0x7a, 0xbb, 0xe7, 0xd9, 0xe1, 0xf6, 0x58, 0x16, 0xaa, 0x58,
	0x57, 0xef, 0x6f, 0x95, 0x90, 0x8a, 0x49, 0xc5, 0x55, 0x25, 0x43, 0x03, 0xa2, 0xe6, 0x3a, 0xe7,
	0x7f, 0x89, 0x9b, 0x7f, 0x5c, 0xf0, 0xa8, 0x90, 0x6a, 0xc4, 0xa5, 0x40, 0x3f, 0x40, 0x33, 0xdd,
	0x65, 0xf9, 0x26, 0x70, 0xfa, 0xee, 0xa0, 0xf3, 0xba, 0x17, 0x1a, 0x9f, 0xf0, 0xc4, 0x13, 0xcb,
	0x22, 0x04, 0x8d, 0x03, 0xdf, 0x8b, 0xe0, 0xac, 0xef, 0x0c, 0xda, 0xc4, 0xfc, 0xa3, 0x6f, 0x01,
	0xd2, 0x9c, 0x4b, 0xc9, 0x0c, 0xe3, 0x1a, 0xa6, 0x6d, 0x90, 0xb9, 0xa6, 0x43, 0x78, 0x56, 0x56,
	0x07, 0xb6, 0xa9, 0x4a, 0xae, 0xb2, 0xe2, 0xc0, 0xf6, 0x59, 0x9e, 0x67, 0x32, 0x68, 0xf4, 0x9d,
	0x81, 0x4b, 0x9e, 0x96, 0xd5, 0x61, 0x5c, 0x33, 0x33, 0x43, 0xa0, 0x2b, 0x68, 0x95, 0x42, 0x56,
	0xb9, 0x0a, 0x9a, 0x26, 0x55, 0x6d, 0xa1, 0x01, 0x34, 0xd4, 0xfd, 0x51, 0x04, 0xad, 0xbe, 0x33,
	0xe8, 0xbe, 0x7e, 0xfe, 0xa8, 0xc0, 0x90, 0xde, 0x1f, 0x05, 0x31, 0x1e, 0x28, 0x84, 0x96, 0xed,
	0x37, 0x38, 0x37, 0xbe, 0x57, 0x8f, 0x7d, 0x97, 0x86, 0x25, 0xb5, 0x17, 0xba, 0x02, 0xb7, 0xac,
	0x0e, 0x81, 0xd7, 0x77, 0x06, 0xde, 0x9b, 0x86, 0x2a, 0x2b, 0x41, 0x34, 0x70, 0x33, 0x81, 0x86,
	0xce, 0x8a, 0x2e, 0xa1, 0x4d, 0xf1, 0x92, 0xb2, 0x51, 0xb4, 0xc4, 0xfe, 0x13, 0xd4, 0x05, 0x30,
	0xe6, 0x72, 0x35, 0xa5, 0xd8, 0x77, 0x10, 0x82, 0xae, 0xb1, 0xc7, 0x78, 0x94, 0x90, 0x88, 0x26,
	0xc4, 0x3f, 0x43, 0x1d, 0x38, 0x5f, 0xcd, 0xdf, 0xce, 0x93, 0x3f, 0xe6, 0xbe, 0x7b, 0xf3, 0x13,
	0xb4, 0xec, 0x8b, 0x08, 0xa0, 0xb5, 0x88, 0x96, 0x4b, 0x3c, 0xf6, 0x9f, 0xe8, 0xff, 0x49, 0x34,
	0x8d, 0xf1, 0xd8, 0x77, 0x50, 0x1b, 0x9a, 0x98, 0x10, 0x1d, 0x79, 0xf3, 0x77, 0x13, 0xba, 0xba,
	0x50, 0x62, 0xba, 0x1e, 0x73, 0xc5, 0xd1, 0x57, 0xe0, 0xa5, 0x3c, 0xdd, 0xf1, 0x75, 0x2e, 0x02,
	0x47, 0x17, 0x49, 0x1e, 0x6c, 0x74, 0x0d, 0x1d, 0xb3, 0xe0, 0x23, 0x97, 0x52, 0x6c, 0xcc, 0x5e,
	0x3c, 0x02, 0x1a, 0x5a, 0x18, 0x04, 0xfd, 0xf2, 0x30, 0x0c, 0xf7, 0xa3, 0x61, 0x0c, 0xf5, 0x57,
	0x3f, 0x64, 0x4b, 0x7b, 0xd3, 0x9e, 0x27, 0x6c, 0x49, 0x23, 0xba, 0x5a, 0x3e, 0xcc, 0xe5, 0x1a,
	0x3a, 0xef, 0x79, 0x96, 0x8b, 0x0d, 0xcb, 0x8b, 0xad, 0xde, 0x98, 0x3b, 0x68, 0x13, 0xb0, 0x50,
	0x5c, 0x6c, 0x25, 0x0a, 0xe0, 0xfc, 0x03, 0x2f, 0x0f, 0xd9, 0x61, 0x1b, 0x34, 0x0d, 0x79, 0x32,
	0xd1, 0x77, 0x70, 0xb1, 0xe3, 0x92, 0xa5, 0xc5, 0x9d, 0x28, 0xf9, 0xd6, 0x2e, 0xcd, 0x23, 0x9d,
	0x1d, 0x97, 0xa3, 0x1a, 0x42, 0x2f, 0xa0, 0x57, 0x8a, 0x7d, 0xa1, 0x44, 0x7e, 0xcf, 0x74, 0x3b,
	0x62, 0x63, 0xd6, 0xe5, 0x91, 0xee, 0x09, 0x1e, 0x19, 0x14, 0xbd, 0x02, 0x94, 0x49, 0x66, 0x41,
	0x26, 0x55, 0xc9, 0x95, 0xd8, 0xde, 0xdb, 0x6d, 0x11, 0x3f, 0x93, 0xc4, 0x10, 0xcb, 0x1a, 0xd7,
	0xd7, 0x68, 0x06, 0xa2, 0xb2, 0xbd, 0x90, 0x41, 0xbb, 0xef, 0x0e, 0x5c, 0xd2, 0xd6, 0x08, 0xd5,
	0x80, 0xa6, 0xed, 0xa8, 0x74, 0x4f, 0x01, 0xd8, 0x63, 0xb5, 0x48, 0x5c, 0x6c, 0xf5, 0x5b, 0x76,
	0x9c, 0x65, 0x91, 0x0a, 0x29, 0xeb, 0x2c, 0x1d, 0x93, 0xc5, 0x37, 0x53, 0xb5, 0x84, 0x4d, 0xf6,
	0x99, 0xd3, 0xbe, 0xf8, 0xdc, 0x69, 0xff, 0x0c, 0x5f, 0x4a, 0xc5, 0x4b, 0x5b, 0x5c, 0xed, 0xcd,
	0xc4, 0xb1, 0x48, 0x77, 0x41, 0xcf, 0xc4, 0x3c, 0x37, 0xb4, 0x4e, 0x6e, 0x23, 0xb0, 0xe6, 0xd0,
	0x2b, 0x30, 0x0d, 0xb0, 0x94, 0x4b, 0x11, 0x5c, 0xf6, 0x9d, 0x4f, 0xe9, 0xd3, 0x53, 0x27, 0x25,
	0x47, 0x70, 0x59, 0x6f, 0xad, 0xde, 0x7b, 0xd7, 0xec, 0xfd, 0x9b, 0x3a, 0x62, 0x62, 0xb8, 0x53,
	0x9c, 0xac, 0xa5, 0x70, 0x61, 0x43, 0xac, 0xf5, 0x32, 0x86, 0x2f, 0x3e, 0xe9, 0x86, 0x3c, 0x68,
	0x4c, 0x56, 0x71, 0xec, 0x3b, 0xfa, 0xc0, 0x17, 0x11, 0xa1, 0xd3, 0x28, 0xf6, 0xcf, 0xd0, 0x53,
	0xb8, 0x9c, 0x27, 0x94, 0x45, 0xbf, 0x47, 0xd3, 0x38, 0x1a, 0xc6, 0xd8, 0x77, 0xcd, 0x45, 0xcf,
	0x16, 0xf4, 0x9d, 0xdf, 0x78, 0xf9, 0xaf, 0x03, 0xbd, 0x47, 0xd7, 0xa6, 0x25, 0xf5, 0x70, 0x6f,
	0x56, 0x0b, 0xb5, 0x2e, 0x8c, 0x16, 0x26, 0x71, 0xf4, 0xf6, 0x9d, 0x55, 0x11, 0x9d, 0xce, 0x70,
	0xb2, 0xa2, 0xbe, 0xfb, 0x3f, 0xbd, 0x34, 0xb4, 0x04, 0xa7, 0xf3, 0x51, 0x32, 0x5b, 0xc4, 0x98,
	0x62, 0xbf, 0xa9, 0x25, 0x48, 0xf0, 0x2c, 0xa1, 0x98, 0x69, 0x97, 0x15, 0xc1, 0x7e, 0x0b, 0x3d,
	0x83, 0x9e, 0xf5, 0x67, 0x34, 0x61, 0xc3, 0xd5, 0x34, 0x1e, 0xfb, 0xe7, 0xe8, 0x1a, 0xbe, 0x1e,
	0xc6, 0xd1, 0x9f, 0x98, 0xfd, 0x16, 0xc5, 0x14, 0x8f, 0xd9, 0x10, 0x4f, 0x12, 0x82, 0x99, 0xd6,
	0xef, 0x74, 0xfe, 0xab, 0xef, 0x0d, 0x7f, 0x84, 0x17, 0x69, 0xb1, 0x0f, 0xb7, 0x45, 0xb1, 0xcd,
	0x45, 0xb8, 0x11, 0x77, 0xaa, 0x28, 0x72, 0x19, 0xae, 0xab, 0x2c, 0xdf, 0x84, 0x79, 0xb6, 0x0e,
	0xef, 0x32, 0xf1, 0x21, 0xd4, 0xc3, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xf2, 0xc4, 0x19,
	0x6c, 0x05, 0x00, 0x00,
}
